library(survival)
library(survminer)
library(reshape2)
library(data.table)
library(stringr)
library(reshape2)
library(dplyr)
library(plyr)
library(survivalROC)
library(forestplot)
options(stringsAsFactors = F)
MRscore<-fread("../dataset/TCGA_data/MRscore_TCGA_Patients9359.csv")
colnames(MRscore)[1]<-"Tumor_Sample_ID"
MRscore$Tumor_Sample_ID<-str_sub(MRscore$Tumor_Sample_ID,1,12)
panImmune<-fread("../dataset/TCGA_data/panImmune_TCGA.csv")
colnames(panImmune)[1]<-"Tumor_Sample_ID"
panImmune$Tumor_Sample_ID[1:3]
MRscore$Tumor_Sample_ID[1:3]
head(MRscore)
MRscore$MRgroup<-sample(c("pos","neg"),nrow(MRscore),replace = T)
MRscore$MRgroup<-ifelse(MRscore$MRscore>0,"pos","neg")
MRscore_immune<-merge(MRscore,panImmune,by="Tumor_Sample_ID")
head(MRscore_immune)
MRscore_immune$OS_Time1<-round(MRscore_immune$OS_Time/365,0)
MRscore_immune$PFI_Time1<-round(MRscore_immune$PFI_Time/365,0)
surv_cut_PFI <- surv_cutpoint(
  MRscore_immune,
  time = "PFI",
  event = "PFI_Time1",
  variables = c("MRscore")
)
summary(surv_cut_PFI)
plot(surv_cut_PFI)
surv_cut_OS <- surv_cutpoint(
  MRscore_immune,
  time = "OS",
  event = "OS_Time1",
  variables = c("MRscore")
)
summary(surv_cut_OS)
plot(surv_cut_OS)
MRscore_immune$surv_cut_OS<-sample(c("High","Low"),nrow(MRscore_immune),replace = T)
MRscore_immune$surv_cut_OS<-ifelse(MRscore_immune$MRscore>=1.09,"High","Low")
fit<-survfit(Surv(OS_Time1,OS) ~ surv_cut_OS,
             data = MRscore_immune)
fit
fit1<- survfit(Surv(OS_Time1,OS) ~ MRgroup,
              data = MRscore_immune)
fit2<- survfit(Surv(PFI_Time1,PFI) ~ MRgroup,
              data = MRscore_immune)
#对不同组的生存率进行假设检验（Log-Rank test）
fit3<- survdiff(Surv(OS_Time1,OS) ~ MRgroup,
               data = MRscore_immune)
fit3
fit4<- survdiff(Surv(PFI_Time1,PFI) ~ MRgroup,
                data = MRscore_immune)
fit4
p<-ggsurvplot( fit,
                data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                title = "OS",
                palette = c("blue","red"),
                facet.by = "Immune_Subtype",
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p
p1<-ggsurvplot( fit3,
                data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                title = "OS",
                palette = c("blue","red"),
                facet.by = "Immune_Subtype",
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p1
p2<-ggsurvplot( fit2,
                data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                palette = c("blue","red"),
                facet.by = "Immune_Subtype",
                title = "PFI",
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p2
p3<-ggsurvplot( fit1,
                data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                title = "OS",
                palette = c("blue","red"),
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p3
p4<-ggsurvplot(fit4,data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                title = "PFI",
                palette = c("blue","red"),
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p4
p5<-ggsurvplot( fit1,
                data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                ggtheme = theme_fivethirtyeight(),
                title = "OS",
                palette = c("blue","red"),
                facet.by = "Types",
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p5
p6<-ggsurvplot( fit2,
                data=MRscore_immune,
                risk.table = TRUE,
                pval = TRUE,
                ggtheme = theme_survminer(),
                title = "PFI",
                palette = c("blue","red"),
                facet.by = "Types",
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p6
library("survival")
library("survminer")
fit <- coxph( Surv(OS_Time1,OS) ~ MRgroup + Immune_Subtype, data = MRscore_immune)
summary(fit)
cox=step(fit,direction = "both")  
ggcoxadjustedcurves(fit, data=MRscore_immune,variable=MRgroup)
library(ggpubr)
library(ggsci)
data<-MRscore_immune[-which(is.na(MRscore_immune$Immune_Subtype)),]
fun_to_plot <- function(data, group, variable) {
  p <- ggviolin(data, x=group, y=variable,fill = group, shape=group)+
    stat_compare_means(comparisons = my_comparisons)+
    scale_fill_d3()+
    guides(fill=FALSE)
    
  return(p)
}
fun_to_plot1 <- function(data, group, variable) {
  p <- ggboxplot(data, x=group, y=variable,fill = group, 
                )+
    theme(axis.text.x = element_text(angle = 90))+
    guides(fill=FALSE)
  return(p)
}
colnames(MRscore_immune)
fun_to_plot1(data,"Types","MRscore")
my_comparisons<-list(c("C1","C2"),
                     c("C1","C3"),
                     c("C1","C4"),
                     c("C1","C5"),
                     c("C2","C3"),
                     c("C2","C4"),
                     c("C2","C5"),
                     c("C3","C4"),
                     c("C3","C5"),
                     c("C4","C5"))
fun_to_plot(data,"Immune_Subtype","MRscore")
filter_data<-MRscore_immune[,-c(1,2,4,5,6,7,36:39,68,69)] %>%na.omit()%>%as.matrix()
library(Hmisc)
library(corrplot)
dim(filter_data)
res2 <- rcorr(as.matrix(filter_data[,c(1,42:57)]))
res2
##Th2 Cells,Neutrophils,Eosinophils,TCR Evenness,Macrophages M0,
#T Cells gamma delta,T Cells CD8,T Cells Follicular Helper,Plasma Cells,
#T Cells CD4 Memory Activated,Dendritic Cells
corrplot(res2$r, type="upper", order="hclust", p.mat = res2$P, sig.level = 0.01, insig = "blank")
filter_data1<-subset(MRscore_immune,select=c("MRscore","Th2 Cells","Neutrophils","Eosinophils",
                                     "TCR Evenness","Macrophages M0","T Cells gamma delta",
                                     "T Cells CD8","T Cells Follicular Helper","Plasma Cells",
                                     "T Cells CD4 Memory Activated","Dendritic Cells"))%>%na.omit()%>%as.matrix()
res3 <- rcorr(as.matrix(filter_data1))
corrplot(res3$r, type="upper", order="hclust", p.mat = res3$P, sig.level = 0.01, insig = "blank")
library(PerformanceAnalytics)
chart.Correlation(filter_data1, histogram=TRUE, pch=19)
#EBV_GC
levels(factor(MRscore_immune$CancerTypes))
GC<-subset(MRscore_immune,CancerTypes=="STAD")
levels(factor(GC$`TCGA Subtype`))
GC$GItype<-GC$`TCGA Subtype`
GC$GItype<-ifelse(GC$`TCGA Subtype`=="GI.EBV","GI.EBV","Other")
GC<-subset(GC,GItype=="GI.EBV")
surv_cut_PFI <- surv_cutpoint(
  GC,
  time = "PFI",
  event = "PFI_Time1",
  variables = c("MRscore")
)
summary(surv_cut_PFI)
plot(surv_cut_PFI)
surv_cut_OS <- surv_cutpoint(
 GC,
  time = "OS",
  event = "OS_Time1",
  variables = c("MRscore")
)
summary(surv_cut_OS)
plot(surv_cut_OS)
GC$surv_cut_GC_OS<-sample(c("High","Low"),nrow(GC),replace = T)
GC$surv_cut_GC_OS<-ifelse(GC$MRscore>=1.73,"High","Low")
GC$surv_cut_GC_PFI<-sample(c("High","Low"),nrow(GC),replace = T)
GC$surv_cut_GC_PFI<-ifelse(GC$MRscore>=1.95,"High","Low")
fit1<-survfit(Surv(OS_Time1,OS) ~ surv_cut_GC_OS,
             data = GC)
fit1
fit2<- survfit(Surv(PFI_Time1,PFI) ~ surv_cut_GC_PFI,
               data = GC)
fit2  
p_OS<-ggsurvplot( fit1,
                data=GC,
                risk.table = TRUE,
                pval = TRUE,
                ggtheme = theme_survminer(),
                title = "OS",
                palette = c("blue","red"),
                facet.by = "Types",
                legend.title="MRscore",
                risk.table.col = "strata",
                surv.median.line = "hv",
                risk.table.y.text.col = T,
                risk.table.y.text = FALSE )
p_OS
p_PFS<-ggsurvplot( fit2,
                  data=GC,
                  risk.table = TRUE,
                  pval = TRUE,
                  ggtheme = theme_survminer(),
                  title = "PFI",
                  palette = c("blue","red"),
                  facet.by = "Types",
                  legend.title="MRscore",
                  risk.table.col = "strata",
                  surv.median.line = "hv",
                  risk.table.y.text.col = T,
                  risk.table.y.text = FALSE )
p_PFS
GC<-subset(MRscore_immune,CancerTypes=="STAD")
levels(factor(GC$`TCGA Subtype`))
my_comparisons<-list(c("GI.EBV","GI.HM-SNV"),
                     c("GI.EBV","GI.CIN"),
                     c("GI.EBV","GI.GS"),
                     c("GI.EBV","GI.HM-indel"))
library(ggsci)
fun_to_plot <- function(data, group, variable) {
  p <- ggviolin(data, x=group, y=variable,fill = group, shape=group)+
    stat_compare_means(comparisons = my_comparisons)+
    scale_fill_d3()+
    guides(fill=FALSE)
  
  return(p)
}
colnames(GC)[7]<-"TCGA_Subtype"
fun_to_plot(data = GC,"TCGA_Subtype",variable = "MRscore")
###Leukocyte Fraction~MRscore
##chooseCancer with r>=0.2,p<0.05
library(survival)
library(survminer)
library(reshape2)
library(data.table)
library(stringr)
library(reshape2)
library(dplyr)
library(plyr)
library(survivalROC)
library(forestplot)
library(ggsci)
library(ggthemes)
options(stringsAsFactors = F)

MRscore<-fread("../dataset/TCGA_data/MRscore_TCGA_Patients9359.csv")
colnames(MRscore)[1]<-"Tumor_Sample_ID"
MRscore$Tumor_Sample_ID<-str_sub(MRscore$Tumor_Sample_ID,1,12)
panImmune<-fread("../dataset/TCGA_data/panImmune_TCGA.csv")
colnames(panImmune)[1]<-"Tumor_Sample_ID"
panImmune$Tumor_Sample_ID[1:3]
MRscore$Tumor_Sample_ID[1:3]
head(MRscore)
MRscore$MRgroup<-sample(c("pos","neg"),nrow(MRscore),replace = T)
MRscore$MRgroup<-ifelse(MRscore$MRscore>0,"pos","neg")
MRscore_immune<-merge(MRscore,panImmune,by="Tumor_Sample_ID")
head(MRscore_immune)
MRscore_immune$OS_Time1<-round(MRscore_immune$OS_Time/365,0)
MRscore_immune$PFI_Time1<-round(MRscore_immune$PFI_Time/365,0)
rm(MRscore)
rm(panImmune)
detach("package:plyr")
cancerNum<-MRscore_immune%>%group_by(Types)%>%summarise(Num=n())
cancerNum<-subset(cancerNum,Num>=10)#move the cancerType with less than 10 sampels
cancerNum<-subset(cancerNum,Types!="LAML"&Types!="DLBC")##move the cancers with no LF value
chooseCancer<-cancerNum$Types
subPanImmune<-MRscore_immune[which(MRscore_immune$CancerTypes%in%chooseCancer),]%>%as.data.frame()
colnames(subPanImmune)[8]<-"Leukocyte_Fraction"
data = subPanImmune
x = "MRscore"
y = "Leukocyte_Fraction"
inputFacet = "Types"
plot_cor_with_label<-function(data,x,y,inputFacet){
  require(ggplot2)
  require(ggthemes)
  require(ggsci)
  cor.coef = TRUE
  corr_eqn <- function(x,y, method='pearson', digits = 2) {
    corr_coef <- round(cor.test(x, y, method=method)$estimate, digits = digits)
    corr_pval <- tryCatch(format(cor.test(x,y, method=method)$p.value, 
                                 scientific=TRUE),
                          error=function(e) NA)
    paste(method, 'r = ', corr_coef, ',', 'p =', round(as.numeric(corr_pval),4))
  }
  p<-data%>%
    ggplot(aes(.[,x],log(.[,y]+1)))+
    geom_point(size = 2,alpha=0.3)+
    theme_bw(base_size = 12)+
    ggtitle(label = paste0(x,"-",y))+
    facet_wrap(~Types,scales = "free",ncol = 5)+
    geom_smooth(method = "lm")
  p
  if (cor.coef) {
    resCor <- data.frame(facets = unique(data[, inputFacet]))
    for(i in seq_along(resCor$facets)) {
      foo <- data[data[,inputFacet] == resCor$facets[i], ]
      resCor$text[i] <- corr_eqn(foo[,x], foo[,y])
    }
    colnames(resCor)[1] <- inputFacet
    resCor$text<-gsub("pearson ","",resCor$text)
    resCor1<-resCor
    resCor2<-resCor
    resCor1$text<-gsub(" , p.*$","",resCor1$text)
    resCor2$text<-gsub("^.*p","p",resCor2$text)
    p <- p + geom_text(data = resCor1, color="red",size=4,
                       aes(x=0.5,
                           0.17 * max(log(data[,y]+1), na.rm = TRUE),
                           label = text)) + 
      geom_text(data = resCor2, color="red",size=4,
                aes(x=0.5,
                    0.12 * max(log(data[,y]+1), na.rm = TRUE),
                    label = text))+
      theme_igray(base_size = 12)
  }
return(p) 
}
colnames(subPanImmune)[11]<-"TIL_Regional_Fraction"

p<-plot_cor_with_label(data = subPanImmune,
                    x = "MRscore",
                    y = "Leukocyte_Fraction",
                    inputFacet = "Types")
p
p<-plot_cor_with_label(data = subPanImmune,
                       x = "MRscore",
                       y = "TCR Shannon",
                       inputFacet = "Types")
p


cor_cross_matix<-function(data,x,y,inputFacet){
  cor.coef = TRUE
  corr_eqn <- function(x,y, method='pearson', digits = 2) {
    corr_coef <- round(cor.test(x, y, method=method)$estimate, digits = digits)
    corr_pval <- tryCatch(format(cor.test(x,y, method=method)$p.value, 
                                 scientific=TRUE),
                          error=function(e) NA)
    paste(method, 'r = ', corr_coef, ',', 'p =', round(as.numeric(corr_pval),4))
  }
  if (cor.coef) {
    resCor <- data.frame(facets = unique(data[, inputFacet]))
    for(i in seq_along(resCor$facets)) {
      foo <- data[data[,inputFacet] == resCor$facets[i], ]
      resCor$text[i] <- corr_eqn(foo[,x], foo[,y])
    }}
  colnames(resCor)[1] <- inputFacet
  resCor$text<-gsub("pearson ","",resCor$text)
  resCor1<-resCor
  resCor2<-resCor
  resCor1$text<-gsub(" , p.*$","",resCor1$text)
  resCor1$text<-gsub("^.*= ","",resCor1$text)%>%as.numeric()
  resCor2$text<-gsub("^.*p","p",resCor2$text)
  resCor2$text<-gsub("^.*= ","",resCor2$text)%>%as.numeric()
  cor_res<-data.frame(CancerTypes=resCor1$Types,r_value=resCor1$text,p_value=resCor2$text)
  colnames(cor_res)[2]<-paste0(y,"_r_value")
  colnames(cor_res)[3]<-paste0(y,"_p_value")
  return(corMat=cor_res)
}
colnames(subPanImmune)
var<-colnames(subPanImmune)[-c(1,2,3,4:7,11,15,19,36:39,68:70)]
var
test<-cor_cross_matix(data = subPanImmune,x = "MRscore", y = var[6],
                inputFacet = "Types")

cordata<-list()
for (i in seq_along(var)) {
  print(i)
  cordata[[i]]<-cor_cross_matix(data = subPanImmune,
                                x = "MRscore", y = var[i],
                                inputFacet = "Types")
}
corfinal<-bind_cols(cordata)
corfinal<-corfinal[,-grep("CancerTypes[0-9]",colnames(corfinal))]
write.csv(corfinal,"../dataset/TCGA_results/panImmune/panImmune_cor.csv",row.names = F)
corfinal_filter<-corfinal
colnames(corfinal_filter)
r_index <- seq(2, 108, 2)
colnames(corfinal_filter)[r_index]
p_index <- seq(3, 109, 2) 
colnames(corfinal_filter)[p_index]
checkname<-data.frame(r=colnames(corfinal_filter)[r_index],p=colnames(corfinal_filter)[p_index])
for (i in 1:54) {
  corfinal_filter[,r_index[i]]<-ifelse(corfinal_filter[,p_index[i]]>=0.01,0,
                                       corfinal_filter[,r_index[i]])
}
write.csv(corfinal_filter,"../dataset/TCGA_results/panImmune/panImmune_cor_filter_p001.csv",row.names = F)
corfinal_r<-corfinal_filter[,-grep("p_value",colnames(corfinal_filter))]
colnames(corfinal_r)<-gsub("_r_value","",colnames(corfinal_r))
library(pheatmap)
mat<-data.frame(row.names = corfinal_r$CancerTypes,as.matrix(corfinal_r[,-1]))
pheatmap(t(mat),border_color = NA,
         color = colorRampPalette(c("navy", "white", "firebrick3"))(50))

bardata<-data.frame(sampleID=subPanImmune$Tumor_Sample_ID,Types=subPanImmune$Types,Immune_Subtype=subPanImmune$Immune_Subtype)
bardata<-bardata%>%group_by(Types,Immune_Subtype)%>%summarise(Num=n())
head(bardata)
datalist<-split(bardata,f=bardata$Types,drop = F)
average<-function(x){
  x/sum(x)
}

for (i in seq_along(datalist)) {
  print(i)
  datalist[[i]]<-datalist[[i]][-which(is.na(datalist[[i]]$Immune_Subtype)),]
  datalist[[i]]<-datalist[[i]]%>%dplyr::mutate(Ratio=apply(datalist[[i]][,3], 2, average))
}
head(datalist[[1]])
data<-bind_rows(datalist)%>%as.data.frame()
data$Types<-factor(data$Types,levels = c("ACC","LUAD","BLCA","LGG",
                                         "COAD","STAD","PRAD","LIHC",
                                         "HNSC","READ","ESCA","KICH",
                                         "GBM","CESC","BRCA","THCA",
                                         "LUSC","SKCM","KIRC","OV",
                                         "KIRP"))
library(RColorBrewer)
#See all palettes
col6<-colorRampPalette(brewer.pal(8,"Accent"))(6)
ggplot(data,aes(Types,Ratio,fill=Immune_Subtype))+
  geom_col()+
  scale_fill_manual(values = col6)+
  theme_few()+
  theme(axis.title.x = element_blank(),
        axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1),
        legend.title = element_blank())

##frequence of the MRscore cross cancers
library(survival)
library(survminer)
library(reshape2)
library(data.table)
library(stringr)
library(reshape2)
library(dplyr)
library(plyr)
library(survivalROC)
library(forestplot)
options(stringsAsFactors = F)
MRscore<-fread("../dataset/TCGA_data/MRscore_TCGA_Patients9359.csv")
colnames(MRscore)[1]<-"Tumor_Sample_ID"
MRscore$Tumor_Sample_ID<-str_sub(MRscore$Tumor_Sample_ID,1,12)
panImmune<-fread("../dataset/TCGA_data/panImmune_TCGA.csv")
colnames(panImmune)[1]<-"Tumor_Sample_ID"
panImmune$Tumor_Sample_ID[1:3]
MRscore$Tumor_Sample_ID[1:3]
head(MRscore)
MRscore$MRgroup<-sample(c("pos","neg"),nrow(MRscore),replace = T)
MRscore$MRgroup<-ifelse(MRscore$MRscore>0,"pos","neg")
MRscore_immune<-merge(MRscore,panImmune,by="Tumor_Sample_ID")
head(MRscore_immune)
MRscore_immune$OS_Time1<-round(MRscore_immune$OS_Time/365,0)
MRscore_immune$PFI_Time1<-round(MRscore_immune$PFI_Time/365,0)
rm(MRscore)
rm(panImmune)
detach("package:plyr")
cancerNum<-MRscore_immune%>%group_by(Types)%>%summarise(Num=n())
cancerNum<-subset(cancerNum,Num>=10)#move the cancerType with less than 10 sampels
cancerNum<-subset(cancerNum,Types!="LAML"&Types!="DLBC")##move the cancers with no LF value
chooseCancer<-cancerNum$Types
subPanImmune<-MRscore_immune[which(MRscore_immune$CancerTypes%in%chooseCancer),]%>%as.data.frame()
library(ggridges)
library(RColorBrewer)
Freq<-ggplot(subPanImmune, 
              aes(MRscore,Types, fill = ..density..)) + 
  geom_density_ridges_gradient(aes(height = ..density..),scale = 1,size = 0.3)+#sacle���÷�???
  scale_fill_gradientn(colours = colorRampPalette(rev(brewer.pal(11,'Spectral')))(32))+
  labs(x="MIRscore")+
  theme_few(base_size = 14)+
  theme(plot.title = element_text(hjust = 0.5),
        axis.title = element_blank())
  #facet_wrap(~Immune_Subtype,scales = "free_x")
Freq
##survival
levels(factor(subPanImmune$Immune_Subtype))
data<-subPanImmune[which(is.na(subPanImmune$Immune_Subtype)),]
surv_cut_PFI <- surv_cutpoint(
  subPanImmune,
  time = "PFI",
  event = "PFI_Time1",
  variables = c("MRscore")
)
summary(surv_cut_PFI)
plot(surv_cut_PFI)
surv_cut_OS <- surv_cutpoint(
  subPanImmune,
  time = "OS",
  event = "OS_Time1",
  variables = c("MRscore")
)
summary(surv_cut_OS)
plot(surv_cut_OS)
subPanImmune$MIRgroup<-sample(c("High","Low"),nrow(subPanImmune),replace = T)
subPanImmune$MIRgroup<-ifelse(subPanImmune$MRscore>=3.84,"High","Low")
subPanImmune$surv_cut_GC_PFI<-sample(c("High","Low"),nrow(subPanImmune),replace = T)
subPanImmune$surv_cut_GC_PFI<-ifelse(subPanImmune$MRscore>=1.09,"High","Low")
fit1<-survfit(Surv(OS_Time1,OS) ~ MIRgroup,
              data = subPanImmune)
fit1
fit2<- survfit(Surv(PFI_Time1,PFI) ~ surv_cut_GC_PFI,
               data = subPanImmune)
fit2  
p_OS<-ggsurvplot( fit1,
                  data=subPanImmune,
                  risk.table = TRUE,
                  pval = TRUE,
                  ggtheme = theme_survminer(),
                  title = "OS",
                  palette = c("blue","red"),
                  #facet.by = "Types",
                  legend.title="MIRscore",
                  risk.table.col = "strata",
                  surv.median.line = "hv",
                  risk.table.y.text.col = T,
                  risk.table.y.text = FALSE )
p_OS
p_PFS<-ggsurvplot( fit2,
                   data=subPanImmune,
                   risk.table = TRUE,
                   pval = TRUE,
                   ggtheme = theme_survminer(),
                   title = "PFI",
                   palette = c("blue","red"),
                   #facet.by = "Types",
                   legend.title="MIRscore",
                   risk.table.col = "strata",
                   surv.median.line = "hv",
                   risk.table.y.text.col = T,
                   risk.table.y.text = FALSE )
p_PFS
##cancerTypes_OS
MRscore<-fread("../dataset/TCGA_data/MRscore_TCGA_Patients9359.csv")
colnames(MRscore)[1]<-"Tumor_Sample_ID"
MRscore$Tumor_Sample_ID<-str_sub(MRscore$Tumor_Sample_ID,1,12)
panImmune<-fread("../dataset/TCGA_data/panImmune_TCGA.csv")
colnames(panImmune)[1]<-"Tumor_Sample_ID"
panImmune$Tumor_Sample_ID[1:3]
MRscore$Tumor_Sample_ID[1:3]
head(MRscore)
MRscore$MRgroup<-sample(c("pos","neg"),nrow(MRscore),replace = T)
MRscore$MRgroup<-ifelse(MRscore$MRscore>0,"pos","neg")
MRscore_immune<-merge(MRscore,panImmune,by="Tumor_Sample_ID")
head(MRscore_immune)
MRscore_immune$OS_Time1<-round(MRscore_immune$OS_Time/365,0)
MRscore_immune$PFI_Time1<-round(MRscore_immune$PFI_Time/365,0)
rm(MRscore)
rm(panImmune)
detach("package:plyr")
cancerNum<-MRscore_immune%>%group_by(Types)%>%summarise(Num=n())
cancerNum<-subset(cancerNum,Num>=10)#move the cancerType with less than 10 sampels
chooseCancer<-cancerNum$Types
subPanImmune<-MRscore_immune[which(MRscore_immune$CancerTypes%in%chooseCancer),]%>%as.data.frame()
datalist<-split.data.frame(subPanImmune,f=subPanImmune$Types,drop = F)
surv_cut_OS<-list()
fit<-list()
p<-list()
for (i in seq_along(datalist)) {
  print(i)
  surv_cut_OS[[i]] <- surv_cutpoint(
    datalist[[i]],
    time = "OS",
    event = "OS_Time1",
    variables = c("MRscore")
  )
  summary(surv_cut_OS[[i]])
  plot(surv_cut_OS[[i]])
  datalist[[i]]$MIRgroup<-sample(c("High","Low"),nrow(datalist[[i]]),replace = T)
  datalist[[i]]$MIRgroup<-ifelse(datalist[[i]]$MRscore>=summary(surv_cut_OS[[i]])[,1],"High","Low")
  fit[[i]]<-survfit(Surv(OS_Time1,OS) ~ MIRgroup,
                data = datalist[[i]])
  p[[i]]<-ggsurvplot(fit[[i]],
                    data=datalist[[i]],
                    risk.table = TRUE,
                    pval = TRUE,
                    ggtheme = theme_survminer(),
                    title = paste0("OS_",names(datalist)[i]),
                    palette = c("blue","red"),
                    #facet.by = "Types",
                    legend.title="MIRscore_",
                    risk.table.col = "strata",
                    surv.median.line = "hv",
                    risk.table.y.text.col = T,
                    risk.table.y.text = FALSE )
  pdf(file = paste0("../dataset/TCGA_results/panImmune/",names(datalist)[i],"_OS.pdf"),width = 5,height = 6,onefile = FALSE)
  print(p[[i]])
  dev.off()
  png(file = paste0("../dataset/TCGA_results/panImmune/",names(datalist)[i],"_OS.png"))
  print(p[[i]])
  dev.off()
}
p[[1]]
pdf(file = "./test.pdf")
print(p[[1]])
dev.off()
  